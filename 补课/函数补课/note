1.数据类型：
基本数据类型：字符串string 数字number 布尔boolean null undefined
引用数据类型： 对象数据类型和函数数据类型
基本数据类型和引用数据类型的区别：
    基本数据类型是对值的操作；
    引用数据类型是对地址的操作；
2.对象创建3步骤：
    1.开辟一个空间地址
    2.把对象中的属性名和属性值都放在这个空间中
    3.把空间地址赋值给变量名；
3.函数包含2部分：定义和调用；
    函数定义阶段3步骤：
    1.开辟一个空间地址
    2.把函数体中的所有JS代码做为字符串放在堆内存空间中；
    3.把空间地址赋值给函数名；
    函数执行2步骤：
    1.形成一个私有作用域,保护他里面的变量不受外界的干扰，函数的这种保护机制就叫做闭包；
    2.把以前堆内存空间中的字符串做为JS代码来执行；

4.堆内存和栈内存
栈内存：1）提供了一个供JS代码执行的环境 2）把基本数据类型做为值都保存在栈内存中
堆内存：里面存储了所有对象数据类型和函数数据类型的值；
        对象数据类型：存的是属性名和属性值；
5.参数
    1.形参：
        如果定义了形参，但是没有传值，拿到的是undefined;
        形参传参有严格的顺序，必须从左往右传；
        关于函数传参：参数可以是任意数据类型；
        如果参数是个函数的话（其实他就是回调函数），关于传进来的这个参数，什么时候调用，我们是不知道的；另外，他可以调用无数次；

    2.函数的参数机制(系统内置的参数机制) arguments;
        方法 callee():代表的是函数本身；
        属性 length：代表实参的个数；
6.关于函数的return
    1.函数返回值：把函数中的内容通过return返回出来；一般在外面会用一个变量进行接收；
      1)函数返回值会出现两个undefined:
        1.函数如果没有写return --undefined;
        2.函数如果写了return，但是没有赋值 --undefined;
      2)return 后面可以返回任意数据类型；

    2.return 有阻断程序执行的作用：可以人为的控制函数执行阶段，你想让函数执行到哪里；就可以让他执行到哪里；
7.函数按照是否有名字：有名函数，匿名函数
8.匿名函数包含连个：函数表达式 自执行函数（闭包）
    函数表达式:
        1)把函数作为表达式或者值赋值给元素的事件；
        2)把函数作为值赋值给变量；
    自执行函数写法：
        1.(function(形参){})(实参);
        2.~function(){}();
        3.+function(){}();
        4.-function(){}();
        5.!function(){}();
9.关于元素的自定义属性：
    1.在页面加载的时候，浏览器会默认把标签上不认识的属性名和属性值干掉；
    2.漏洞：浏览器只会加载一次（只会检查一次）；
    等浏览器加载完成后，在执行JS代码的时候，给他添加上自定义属性；
10.关于函数封装思路：
    1.保证html代码结构一致；目的是为了在同一父级下获取所有元素；
    2.实现主程序；
    3.传参；











