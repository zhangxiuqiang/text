1.函数：有名字的函数和匿名函数
    1.函数调用时，会形成一个私有作用域，保护里面的变量不受外界的干扰，函数的这种保护机制就叫做闭包；
2.关于栈和堆
栈：提供一个供JS代码执行的环境；而且里面可以保存一些简单的基本数据类型的值；
3.关于基本数据类型和引用数据类型的区别：
    基本数据类型是对值的操作；
    引用数据类型是对地址的操作；
4.引用数据类型：包含 对象数据类型和函数数据类型
对象数据类型创建有3步骤：
    1.开辟一个空间地址
    2.把对象的属性名和属性值存放在这个空间中
    3.把空间地址赋值给变量名；
函数包含：定义 和 调用
函数定义3阶段：
    1.开辟一个空间地址
    2.把函数体中的所有JS代码做为字符串存在这个空间中；
    3.把空间地址赋值给函数名；
函数执行2阶段：
    1.函数调用时形成一个私有作用域
    保护里面的变量不受外界的干扰，函数的这种保护机制，叫做闭包；
    2.把堆空间中字符串做为JS代码来从上到下的执行；
5.关于this指向
1）当触发元素绑定事件的时候，会执行一个函数，函数中的this，指向当前这个元素；
6.判断
1）if、else if、else
    if的几种简写方式：
    1）只有if没有else的时候，可以省略大括号 eg:if('3'==3) alert(true)
    2)用 && 和 ||实现
    ('3'==3) && alert(true); //只能用在if语句中
    ('3'===3) || alert(false) //只能用在else语句中
    3）三目 '3'==3?alert(true):alert(false);
2)三目 或者 三元表达式 或 三元运算符
    三目： 条件？语句1：语句2；
    '3'==3?alert(true):alert(false);*/
    if('3'==3){
        alert(true)
    }
    三目中当语句2不存在的情况下；
    '3'==3?alert(true):null;
3）switch
    switch (i%4){
            case 0:
                语句1;
                break;
            case 1:
                语句2;
                break;
            default :
                语句3;
                break;
    }

7.运算符
1.算术：+ - * / %;
2.赋值：= += -= *= /= %=
3.比较：<、>、<=、>=、==、===、!=、!==
    1）需要注意的第一点：
    var n=12;//0<n<10 :这么写一定是错的，必须写成&&的形式
    if(n>0 && n<10){
        alert('1位数')
    }else{
        alert('2位数')
    }
    2）
    == 比较的是值，不比较类型 ！=
    === 比较值，同时比较类型  ！==
4）逻辑：&& 与、|| 或、! 否
算术》比较》逻辑》赋值
8.关于隐式数据类型的转换： - * / % ==;
9.数据类型的比较
1）对象==对象 比较的是地址 []==[]-->false
2) 对象==字符串 转成字符串 []=='' ->true;
3) 对象==数字 转成数字 []==0 ->true;
4)对象==布尔 转成数字 []==![]->true : ![]->false->0; []->''->0;
5)字符串==数字 转成数字  ''==0 ->true;
6)字符串==布尔 转成数字 ''==!![] ->false; ''==![] ->true;
7)数字==布尔 转成数字 0==![]->true
8)以上规律都不适用
null==undefined -->true
null===undefined -->false
9)NaN 他跟任何值都不想等 包括他们自己；












